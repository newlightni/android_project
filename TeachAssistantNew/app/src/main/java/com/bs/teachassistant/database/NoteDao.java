package com.bs.teachassistant.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bs.teachassistant.entity.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Term = new Property(1, String.class, "term", false, "TERM");
        public final static Property CalssName = new Property(2, String.class, "calssName", false, "CALSS_NAME");
        public final static Property Local = new Property(3, String.class, "local", false, "LOCAL");
        public final static Property Calssify = new Property(4, String.class, "calssify", false, "CALSSIFY");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property Content = new Property(7, String.class, "Content", false, "CONTENT");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
        public final static Property Pert = new Property(9, String.class, "pert", false, "PERT");
        public final static Property CourseId = new Property(10, Long.class, "courseId", false, "COURSE_ID");
    }


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TERM\" TEXT," + // 1: term
                "\"CALSS_NAME\" TEXT," + // 2: calssName
                "\"LOCAL\" TEXT," + // 3: local
                "\"CALSSIFY\" TEXT," + // 4: calssify
                "\"TITLE\" TEXT," + // 5: title
                "\"REMARK\" TEXT," + // 6: remark
                "\"CONTENT\" TEXT," + // 7: Content
                "\"TIME\" TEXT," + // 8: time
                "\"PERT\" TEXT," + // 9: pert
                "\"COURSE_ID\" INTEGER);"); // 10: courseId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String term = entity.getTerm();
        if (term != null) {
            stmt.bindString(2, term);
        }
 
        String calssName = entity.getCalssName();
        if (calssName != null) {
            stmt.bindString(3, calssName);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(4, local);
        }
 
        String calssify = entity.getCalssify();
        if (calssify != null) {
            stmt.bindString(5, calssify);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(8, Content);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String pert = entity.getPert();
        if (pert != null) {
            stmt.bindString(10, pert);
        }
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(11, courseId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String term = entity.getTerm();
        if (term != null) {
            stmt.bindString(2, term);
        }
 
        String calssName = entity.getCalssName();
        if (calssName != null) {
            stmt.bindString(3, calssName);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(4, local);
        }
 
        String calssify = entity.getCalssify();
        if (calssify != null) {
            stmt.bindString(5, calssify);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(8, Content);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String pert = entity.getPert();
        if (pert != null) {
            stmt.bindString(10, pert);
        }
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(11, courseId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // term
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // calssName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // local
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // calssify
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Content
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pert
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // courseId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTerm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCalssName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocal(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCalssify(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPert(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCourseId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
