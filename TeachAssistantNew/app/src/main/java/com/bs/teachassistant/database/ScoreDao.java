package com.bs.teachassistant.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bs.teachassistant.entity.Score;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCORE".
*/
public class ScoreDao extends AbstractDao<Score, Long> {

    public static final String TABLENAME = "SCORE";

    /**
     * Properties of entity Score.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property StuId = new Property(2, String.class, "stuId", false, "STU_ID");
        public final static Property Term = new Property(3, String.class, "term", false, "TERM");
        public final static Property ClassName = new Property(4, String.class, "className", false, "CLASS_NAME");
        public final static Property Score = new Property(5, Integer.class, "score", false, "SCORE");
        public final static Property GroupName = new Property(6, String.class, "groupName", false, "GROUP_NAME");
    }


    public ScoreDao(DaoConfig config) {
        super(config);
    }
    
    public ScoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCORE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"STU_ID\" TEXT," + // 2: stuId
                "\"TERM\" TEXT," + // 3: term
                "\"CLASS_NAME\" TEXT," + // 4: className
                "\"SCORE\" INTEGER," + // 5: score
                "\"GROUP_NAME\" TEXT);"); // 6: groupName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCORE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Score entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String stuId = entity.getStuId();
        if (stuId != null) {
            stmt.bindString(3, stuId);
        }
 
        String term = entity.getTerm();
        if (term != null) {
            stmt.bindString(4, term);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(5, className);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(6, score);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(7, groupName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Score entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String stuId = entity.getStuId();
        if (stuId != null) {
            stmt.bindString(3, stuId);
        }
 
        String term = entity.getTerm();
        if (term != null) {
            stmt.bindString(4, term);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(5, className);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(6, score);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(7, groupName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Score readEntity(Cursor cursor, int offset) {
        Score entity = new Score( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stuId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // term
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // className
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // score
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // groupName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Score entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStuId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTerm(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScore(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setGroupName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Score entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Score entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Score entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
