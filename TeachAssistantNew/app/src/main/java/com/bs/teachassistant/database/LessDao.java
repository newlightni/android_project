package com.bs.teachassistant.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bs.teachassistant.entity.Less;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LESS".
*/
public class LessDao extends AbstractDao<Less, Long> {

    public static final String TABLENAME = "LESS";

    /**
     * Properties of entity Less.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Chapter = new Property(2, String.class, "chapter", false, "CHAPTER");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Year = new Property(4, String.class, "year", false, "YEAR");
        public final static Property Term = new Property(5, String.class, "term", false, "TERM");
        public final static Property Local = new Property(6, String.class, "local", false, "LOCAL");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property CourseId = new Property(8, Long.class, "courseId", false, "COURSE_ID");
        public final static Property Pert = new Property(9, String.class, "pert", false, "PERT");
    }


    public LessDao(DaoConfig config) {
        super(config);
    }
    
    public LessDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CHAPTER\" TEXT," + // 2: chapter
                "\"TIME\" TEXT," + // 3: time
                "\"YEAR\" TEXT," + // 4: year
                "\"TERM\" TEXT," + // 5: term
                "\"LOCAL\" TEXT," + // 6: local
                "\"CONTENT\" TEXT," + // 7: content
                "\"COURSE_ID\" INTEGER," + // 8: courseId
                "\"PERT\" TEXT);"); // 9: pert
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Less entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String chapter = entity.getChapter();
        if (chapter != null) {
            stmt.bindString(3, chapter);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(5, year);
        }
 
        String term = entity.getTerm();
        if (term != null) {
            stmt.bindString(6, term);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(7, local);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(9, courseId);
        }
 
        String pert = entity.getPert();
        if (pert != null) {
            stmt.bindString(10, pert);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Less entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String chapter = entity.getChapter();
        if (chapter != null) {
            stmt.bindString(3, chapter);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(5, year);
        }
 
        String term = entity.getTerm();
        if (term != null) {
            stmt.bindString(6, term);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(7, local);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(9, courseId);
        }
 
        String pert = entity.getPert();
        if (pert != null) {
            stmt.bindString(10, pert);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Less readEntity(Cursor cursor, int offset) {
        Less entity = new Less( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapter
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // year
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // term
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // local
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // courseId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // pert
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Less entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapter(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYear(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTerm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocal(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCourseId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setPert(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Less entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Less entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Less entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
